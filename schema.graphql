# SP: KEEP. Even though these are never used, but just assigned once for a respective protocol. I think this is still important because it will possibly lead to a factor that could change the resultant reputation score for an account
enum LendingType {
  "Collateralized Debt Position (CDP) protocols have singular isolated positions created by users. We aggregate them to give a single view of a market"
  CDP
  "Pooled protocols pool all users assets into a single market"
  POOLED
}

# SP: KEEP same as above
enum RiskType {
  "Global risk means each users position in a market is combined for one score to determine if they can be liquidated"
  GLOBAL
  "Isolated risk means each users position in a market or CDP is isolated for risk of liquidation"
  ISOLATED
}

#SP: In general I think that we can simplify this down to ETHEREUM for now, but keep it for use later as we onboard different networks
enum Network {
  "The ethereum network"
  ETHEREUM
  "The polygon network"
  POLYGON
  "The avalanche network"
  AVALANCHE
}

type USDTotal @entity {
  "Id made up from parent id + [period]  e.g. [MarketId]+[AccountId]+[SeasonId]+[USD]"
  id: ID!
  "Total USD deposited"
  depositedUSD: BigDecimal!
  "Total USD withdrawn"
  withdrawnUSD: BigDecimal!
  "Total USD borrowed"
  borrowedUSD: BigDecimal!
  "Total USD repaid"
  repaidUSD: BigDecimal!
  "Total USD liquidated"
  liquidatedUSD: BigDecimal!
}

type AssetTotal @entity {
  "Id made up from parent id + [period]  e.g. [MarketId]+[AccountId]+[SeasonId]+[assetId]"
  id: ID!
  "Total Asset deposited"
  deposited: BigDecimal
  "Total Asset withdrawn"
  withdrawn: BigDecimal
  "Total Asset borrowed"
  borrowed: BigDecimal
  "Total Asset repaid"
  repaid: BigDecimal
  "Total Asset liquidated"
  liquidated: BigDecimal
}

type CountTotal @entity {
  "Id made up from parent id + [period]  e.g. [MarketId]+[AccountId]+[SeasonId]"
  id: ID!
  "Total deposited count"
  deposited: Int
  "Total withdrawn count"
  withdrawn: Int
  "Total borrowed count"
  borrowed: Int
  "Total repaid count"
  repaid: Int
  "Total liquidated count"
  liquidated: Int
}

"""
Protocol represents all aggregated information of a single protocol on a single network.
"""
type Protocol @entity {
  "The Name of the Protocol"
  id: ID!
  "The Network the protocol exists on - Ethereum, Polygon, etc."
  network: Network!
  "Type of lending protocol"
  type: LendingType!
  "Protocol Main Address"
  address: Bytes!
  "All Markets within this Protocol"
  markets: [Market!]! @derivedFrom(field: "protocol")
  "All Accounts that have used this Protocol"
  accounts: [AccountInProtocol!]! @derivedFrom(field: "protocol")
  "All events that happened in the protocol"
  events: [Event!]! @derivedFrom(field: "protocol")
}

"""
An asset used in a lending protocol. All assets should follow ERC-20 Standard
"""
type Asset @entity {
  "Contract address"
  id: ID!
  "Token symbol"
  symbol: String!
  "Name of asset"
  name: String!
  "Decimals of the asset"
  decimals: Int!
}

"""
A single Market within a Protocol. A Market can be a single pool where all assets are pooled together. It can also be a combination of Collateralized Debt Positions (CDPs). The CDPs are aggregated together to represent a uniform Market. A Market can only contain 1 depositAsset and 1 borrowAsset.
"""
type Market @entity {
  "Contract address"
  id: ID! # SP: This is too ambiguous right now, is it the actual market (the one we get most market-related events from, or is it the contract that contains the asset reserves)
  "Name of the Market"
  name: String!
  "The Protocol the Market is a part of"
  protocol: Protocol!
  "Underlying Asset"
  asset: Asset!
  "Borrowed asset if there is one"
  collateralBackedAsset: Asset
}

"""
An account that has interacted with at least 1 lending protocol tracked in the Subgraph
""" # SP: Accounts within our protocol will have one reputation score.
type Account @entity {
  "Account external address"
  id: ID!
  "True if user has ever borrowed"
  hasBorrowed: Boolean!
  "Number of times the account has gotten liquidated"
  liquidatedCount: Int!
  "Number of times the account liquidated others"
  liquidatingCount: Int!
  "Assets the account has engaged with"
  assets: [Asset!]
  "Seasons that the account is a part of"
  seasons: [AccountInSeason!]
  "Protocols that are associated to the account"
  protocols: [AccountInProtocol!]! @derivedFrom(field: "account")
  "Markets that are associated to the account"
  markets: [AccountInMarket!]! @derivedFrom(field: "account")
  "A flag the signifies a user requested his reputation from our system"
  reputationRequested: Boolean
}

"""
History of an Account within a single Protocol
"""
type AccountInProtocol @entity {
  "Account ID concatenated with Protocol ID"
  id: ID!
  "Protocol the Account is active in"
  protocol: Protocol!
  "Account which has participated in the Protocol"
  account: Account!
  "USD Totals for entity"
  USDTotals: USDTotal!
  "Action count totals for entity"
  countTotals: CountTotal
}

"""
Actions and history of an Account within a single Market
"""
type AccountInMarket @entity {
  "Account ID concatenated with Market ID"
  id: ID!
  "Market the account is involved with"
  market: Market!
  "Account involved in this market"
  account: Account!
  "USD Totals for entity"
  USDTotals: USDTotal!
  "Asset totals for entity"
  assetTotals: AssetTotal
  "Action count totals for entity"
  countTotals: CountTotal
}

type Position @entity {
  "Build from accountid + marketid + type"
  id: ID!
  "account id"
  account: Account!
  "Market id"
  market: Market!
  "position type - Borrowing | Lending"
  type: String
  "The balance of the position"
  balance: BigDecimal!
  "total borrowed"
  borrowed: BigDecimal!
  "total borrowed"
  repaid: BigDecimal!
  "total borrowed"
  deposited: BigDecimal!
  "total borrowed"
  withdrawn: BigDecimal!
  "Is position closed - can be determined when repay > borrow or withdraw > deposit"
  isActive: Boolean!
  "Related event to the open position"
  events: [Event!]!
  "Interest paid - can be calculated once repay > borrow or withdraw > deposit"
  interestPaid: BigDecimal!
  "Closed positions count"
  closedPositions: [Position!]!
}

type AccountInSeason @entity {
  "Id made of [accountid]+[seasonid]"
  id: ID!
  "Account id"
  account: Account!
  "list of markets associated with the account in this season"
  markets: [AccountInMarket!]
  "list of protocols associated with the account in this season"
  protocols: [AccountInProtocol!]
  "Season ID"
  season: Season
}

type Season @entity {
  "season id - running number"
  id: ID!
  "season start date"
  startDate: Int
  "season end date"
  endDate: Int
  "season start block"
  startBlock: Int
  "season end block"
  endBlock: Int
  "Flag to determine if that is the current season"
  isCurrent: Boolean!
}

"""
An event is a general action that occurs in a Lending Protocol
"""
type Event @entity {
  "The Protocol the event originated from"
  protocol: Protocol!
  "Transaction hash concatenated with log index"
  id: ID!
  "The Market within a Protocol the event originated from"
  market: Market!
  "Main account involved in the event"
  account: Account!
  "Account to be transferred to - Relevant to Transfer event"
  to: Account
  "Event type: Deposit Withdraw Borrow Repay Liquidate"
  eventType: String!
  "Amount of Tokens transferred - Underlying"
  amount: BigDecimal! #SP: The distinction between the tokens used here and xTokenAmount needs to be discussed
  "Block timestamp"
  blockTime: Int! #SP: DISCARD because if we have blockNumber, I think we don't need blockTime or viceversa.
  "Block number"
  blockNumber: Int!
  "Amount of Tokens transferred - used only in specific cases"
  xTokenAmount: BigDecimal #SP: see 'amount' and I also think this needs a different description.
  "Liquidator that paid the debt: Relevant only for Liquidation event"
  liquidator: Account
  "Account of the payer - Related to Repay event"
  payer: Account #SP: I wonder if we can get rid of this and instead lump this detail into LifetimeRepaid or something in acp and acm, this way if a person's repaid is bigger than their lifetimeBorrowed, it shows that they repaid someone else's loan... Hmm I can see keeping it separate as a good thing though so we can further incentivize good actors in our protocol (people paying off other people's debt to keep the protocol healthy).
  "Account that was paid by account field"
  onBehalfOf: Account # #SP: DISCARD not really used, only used in Aave, and I'm not sure it's relevant for us. Comes back to my point on repaid above.
  "Interest rate mode"
  interestRateMode: Int #SP: DISCARD not really used
  "Borrow rate"
  borrowRate: BigInt #SP: DISCARD not really used
}
